{"version":3,"sources":["Card.js","Cardlist.js","Searchbox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","className","alt","src","id","Cardlist","robots","cardComponent","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAkBeA,EAfF,SAACC,GAAW,IAEdC,EAAQD,EAARC,KACP,OAEI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,QAAOC,IAAG,+BAA0BJ,EAAMK,GAAhC,mBACnB,6BACI,4BAAKJ,MCINK,EAXE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGN,GAAIE,EAAOI,GAAGN,GAAIJ,KAAMM,EAAOI,GAAGV,UAE3D,OACC,oCACGO,ICIOK,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKb,UAAU,OACb,2BACCA,UAAU,oCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCNI,EARA,SAACnB,GACd,OACI,yBAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAC/DvB,EAAMwB,WC6CFC,E,kDAzCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACf,EAAKC,SAAS,CAACd,YAAaa,EAAME,OAAOC,SAbxC,EAAKC,MAAQ,CACTxB,OAAQ,GACRO,YAAa,IAJP,E,gEAOO,IAAD,OAChBkB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BAUjC,IAAD,OACAC,EAAiBC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAC5C,OAAOA,EAAON,KAAKuC,cAAcC,SAAS,EAAKV,MAAMjB,YAAY0B,kBAErE,OAAiC,IAA7BF,KAAKP,MAAMxB,OAAOmC,OACX,wBAAIxC,UAAU,MAAd,WAIX,yBAAKA,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWa,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQ8B,U,GAlCZM,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OACT,6BACE,kBAAC,EAAD,OAGAC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0a2503d7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = (props) => {\r\n   \r\n    const {name} = props;\r\n    return (\r\n        \r\n        <div className='tc bg-light-green dib br3 ma2 pa3 grow bw2 shadow-5'>\r\n            <img alt='hello'src={`https://robohash.org/${props.id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n//import robots from './robots'\r\n\r\nconst Cardlist = ({robots}) => {\r\n    const cardComponent = robots.map((user, i) => {\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} />\r\n    })\r\n    return (\r\n     <>   \r\n       {cardComponent}\r\n     </>  \r\n    );\r\n}\r\n\r\nexport default Cardlist; ","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n          <input \r\n           className='pa3 ba b--green bg-lightest-blue '\r\n           type='search' \r\n           placeholder='Search Robots'\r\n           onChange={searchChange} />\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n      <div style={{overflowY: 'scroll', border: '1px solid black', height:'500px'}}>\r\n          {props.children}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Scroll; ","import React from 'react';\r\nimport Cardlist from './Cardlist';\r\n//import {robots} from './robots';\r\nimport Searchbox from './Searchbox';\r\n//import { robots } from './robots';\r\nimport Scroll from './Scroll'\r\n\r\n\r\nclass App extends React.Component  {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n          .then(response => response.json())\r\n          .then(users => this.setState({robots: users})); \r\n       \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n       this.setState({searchfield: event.target.value})\r\n     \r\n       //console.log(event.target.value);\r\n    }\r\n\r\n    render () {\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        if (this.state.robots.length === 0) {\r\n            return <h1 className=\"tc\">Loading</h1>\r\n        } else {\r\n    return (\r\n        \r\n        <div className=\"tc\">\r\n          <h1 className=\"f2\">RoboFriends</h1>\r\n          <Searchbox searchChange={this.onSearchChange}/>\r\n          <Scroll>\r\n            <Cardlist robots={filteredRobots}/>\r\n          </Scroll>\r\n        </div>\r\n    ) \r\n        }\r\n    }\r\n}\r\n\r\nexport default App; \r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport './App.css'\n\n\nReactDOM.render(\n<div>\n  <App/>\n</div>\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}